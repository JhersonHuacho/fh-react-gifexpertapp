{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","console","log","onSubmit","e","preventDefault","trim","length","categories","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","key","GifEpertApp","ReactDOM","render","document","getElementById"],"mappings":"+LAyCeA,EAtCK,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EACLC,mBAAS,IADJ,mBAClCC,EADkC,KACtBC,EADsB,KAuBzC,OAFAC,QAAQC,IAAI,kCAGV,0BAAMC,SAZa,SAACC,GACpBA,EAAEC,iBACEN,EAAWO,OAAOC,OAAS,IAC7BV,GAAc,SAAAW,GAAU,OAAKT,GAAL,mBAAoBS,OAC5CR,EAAc,KAEhBC,QAAQC,IAAI,0CAOV,2BACEO,KAAK,OACLC,MAAOX,EACPY,SArBoB,SAACP,GACzBH,QAAQC,IAAIE,EAAEQ,OAAOF,OACrBV,EAAcI,EAAEQ,OAAOF,Y,uBCXdG,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DACfC,EADe,iDACiCC,UAAUH,GAD3C,+DAEFI,MAAMF,GAFJ,cAEfG,EAFe,gBAGEA,EAAKC,OAHP,uBAGbC,EAHa,EAGbA,KAEFC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EAC3B,MAAO,CACLC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QATjB,kBAedM,GAfc,4CAAH,sDCCPO,EAAc,SAAC,GAAwB,IAAtBJ,EAAqB,EAArBA,GAAIC,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAGvC,OAFAf,QAAQC,IAAI,cAAe,CAACuB,KAAIC,QAAOV,QAGrC,yBAAKc,UAAU,0CACb,yBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,2BAAKA,KCJEO,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAAe,ECDb,SAACA,GAAc,IAAD,EAEdhB,mBAAS,CACjCuB,KAAM,GACNa,SAAS,IAJ6B,mBAEjCC,EAFiC,KAE1BC,EAF0B,KAyBxC,OAlBAC,qBAAU,WACRxB,EAAQC,GACHwB,MAAK,SAAAC,GACJH,EAAS,CACPf,KAAMkB,EACNL,SAAS,SAIhB,CAACpB,IASGqB,EDtByBK,CAAa1B,GAAhCa,EAF0B,EAEhCN,KAAca,EAFkB,EAElBA,QAYrB,OAXAjC,QAAQC,IAAIyB,GACZ1B,QAAQC,IAAIgC,GAWV,oCACE,wBAAIJ,UAAU,qCAAqChB,GACjDoB,GAAW,uBAAGJ,UAAU,oCAAb,WAEb,yBAAKA,UAAU,aAEXH,EAAOJ,KAAI,SAACC,GAGV,OAAO,kBAAC,EAAD,eAAaiB,IAAKjB,EAAIC,IAAQD,UEUlCkB,EAlCK,WAAM,MAGY5C,mBAAS,CAAC,cAHtB,mBAGjBU,EAHiB,KAGLX,EAHK,KAIxBI,QAAQC,IAAI,SAAUM,GAYtB,OAFAP,QAAQC,IAAI,mBAAoBM,GAG9B,oCACE,4CACA,kBAAC,EAAD,CAAaX,cAAeA,IAE5B,6BACA,4BAEIW,EAAWe,KAAI,SAAAT,GAEb,OAAO,kBAAC,EAAD,CAAS2B,IAAK3B,EAAUA,SAAUA,U,MCzBrD6B,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,S","file":"static/js/main.3dbd3690.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst AddCategory = ({ setCategories }) => {\r\n  const [inputValue, setInputValue] = useState('');\r\n\r\n  // -> Usando desestructuración de objetos\r\n  const handleInputChangeDos = ({ target: { value } }) => {\r\n    setInputValue(value);\r\n  }\r\n  const handleInputChange = (e) => {\r\n    console.log(e.target.value);\r\n    setInputValue(e.target.value);\r\n  }\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    if (inputValue.trim().length > 2) {\r\n      setCategories(categories => [inputValue, ...categories]);\r\n      setInputValue('');\r\n    }\r\n    console.log('AddCategory - dentro de handleSubmit');\r\n  }\r\n\r\n  console.log('AddCategory - antes del return');\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>      \r\n      <input \r\n        type=\"text\"\r\n        value={inputValue}\r\n        onChange={ handleInputChange }\r\n      />\r\n    </form>\r\n  )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n  setCategories: PropTypes.func.isRequired\r\n}\r\n\r\nexport default AddCategory;","\r\nexport const getGifs = async(category) => {\r\n  const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=5r7MRKD79yT3zqVjdv6egHkpvfO7f9Km`;\r\n  const resp = await fetch(url);\r\n  const { data } = await resp.json();\r\n\r\n  const gifs = data.map(img => {\r\n    return {\r\n      id: img.id,\r\n      title: img.title,\r\n      url: img.images?.downsized_medium.url\r\n    }\r\n  });\r\n\r\n  //console.log(gifs);\r\n  //setImages(gifs);\r\n  return gifs;\r\n}  ","import React from 'react'\r\n\r\nexport const GifGridItem = ({ id, title, url }) => {\r\n  console.log('GifGridItem' ,{id, title, url});\r\n\r\n  return (\r\n    <div className=\"card animate__animated animate__fadeIn\">\r\n      <img src={url} alt={title}/>\r\n      <p>{ title }</p>      \r\n    </div>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs'\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nexport const GifGrid = ({ category }) => {\r\n\r\n  const {data: images, loading} = useFetchGifs(category);\r\n  console.log(images);\r\n  console.log(loading);\r\n  // const [count, setCount] = useState(0);\r\n  // const [images, setImages] = useState([]);\r\n\r\n  // useEffect(() => {\r\n  //   getGifs(category)\r\n  //     .then(setImages);\r\n  //     //.then(imgs => setImages(imgs));      \r\n  // }, [category]);\r\n\r\n  return (\r\n    <>\r\n      <h3 className=\"animate__animated animate__fadeIn\">{category}</h3>\r\n      { loading && <p className=\"animate__animated animate__flash\">Loading</p> }\r\n\r\n      <div className=\"card-grid\">        \r\n        {\r\n          images.map((img) => {\r\n            //return <li key={id}>{ title }</li>\r\n            //return <GifGridItem key={image.id} img = {image} />\r\n            return <GifGridItem key={img.id} {...img} />\r\n          })\r\n        }      \r\n        {/* <h3>{ count }</h3>\r\n        <button onClick={ () => setCount(count + 1) }>Contador</button> */}\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n","import { useState, useEffect } from 'react';\r\nimport { getGifs } from '../helpers/getGifs';\r\n\r\nexport const useFetchGifs = (category) => {\r\n\r\n  const [state, setState] = useState({\r\n    data: [],\r\n    loading: true\r\n  });\r\n\r\n  useEffect(() => {\r\n    getGifs(category)\r\n        .then(imgs => {\r\n          setState({\r\n            data: imgs,\r\n            loading: false\r\n          });\r\n        });\r\n        //.then(imgs => setImages(imgs));      \r\n  }, [category]);\r\n\r\n  // setTimeout(() => {\r\n  //   setState({\r\n  //     data: [1,2,3,4],\r\n  //     loading: false\r\n  //   });      \r\n  // }, 3000);\r\n\r\n  return state;\r\n}","import React, { useState } from 'react';\r\nimport  AddCategory from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nconst GifEpertApp = () => {\r\n  \r\n  //const categories = ['One Punch', 'Samurai X', 'Dragon Ball'];\r\n  const [categories, setCategories] = useState(['One Punch'])\r\n  console.log('inicio', categories);\r\n  const handleApp = () => {\r\n    console.log('dentro del método - Antes de setCategories', categories);\r\n    //...categories => Operador Spread (Spread operator)\r\n    setCategories([...categories, 'HunterXHunter']);        \r\n    //setCategories(cats => [...cats, 'HunterXHunter']);\r\n    console.log('dentro del método - Depues de setCategories', categories);    \r\n    setCategories([...categories, 'huacho']);\r\n  }\r\n\r\n  console.log('antes del return', categories);\r\n\r\n  return (\r\n    <>\r\n      <h2>GifExpertApp</h2>\r\n      <AddCategory setCategories={setCategories} />\r\n      {/* <button onClick={handleApp}>Agregar</button> */}\r\n      <hr/>      \r\n      <ol>\r\n        {\r\n          categories.map(category => {\r\n            //return <li key={ category }>{ category }</li>\r\n            return <GifGrid key={category} category={category} />\r\n          })\r\n        }\r\n      </ol>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default GifEpertApp;","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport GifEpertApp from './GifExpertApp';\r\nimport './index.css';\r\n\r\nReactDOM.render(\r\n  <GifEpertApp />, \r\n  document.getElementById('app')\r\n);"],"sourceRoot":""}